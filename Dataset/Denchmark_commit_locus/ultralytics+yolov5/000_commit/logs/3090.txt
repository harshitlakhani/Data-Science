      Add `train.run()` method (#3700)          * Update train.py explicit arguments          * Update train.py          * Add run method 
         yaml.safe_dump(vars(opt), f, sort_keys=False)        # Configure     plots = not opt.evolve  # create plots     plots = not evolve  # create plots      cuda = device.type != 'cpu'      init_seeds(2 + RANK)     with open(opt.data) as f:     with open(data) as f:          data_dict = yaml.safe_load(f)  # data dict        # Loggers      loggers = {'wandb': None, 'tb': None}  # loggers dict      if RANK in [-1, 0]:          # TensorBoard         if not opt.evolve:         if not evolve:              prefix = colorstr('tensorboard: ')              logger.info(f"{prefix}Start with 'tensorboard --logdir {opt.project}', view at http://localhost:6006/")             loggers['tb'] = SummaryWriter(opt.save_dir)             loggers['tb'] = SummaryWriter(str(save_dir))            # W&B          opt.hyp = hyp  # add hyperparameters          run_id = torch.load(weights).get('wandb_id') if weights.endswith('.pt') and os.path.isfile(weights) else None          wandb_logger = WandbLogger(opt, save_dir.stem, run_id, data_dict)          loggers['wandb'] = wandb_logger.wandb         data_dict = wandb_logger.data_dict         if wandb_logger.wandb:         if loggers['wandb']:             data_dict = wandb_logger.data_dict              weights, epochs, hyp = opt.weights, opt.epochs, opt.hyp  # may update weights, epochs if resuming        nc = 1 if single_cls else int(data_dict['nc'])  # number of classes      names = ['item'] if single_cls and len(data_dict['names']) != 1 else data_dict['names']  # class names     assert len(names) == nc, '%g names found for nc=%g dataset in %s' % (len(names), nc, opt.data)  # check     is_coco = opt.data.endswith('coco.yaml') and nc == 80  # COCO dataset     assert len(names) == nc, '%g names found for nc=%g dataset in %s' % (len(names), nc, data)  # check     is_coco = data.endswith('coco.yaml') and nc == 80  # COCO dataset        # Model      pretrained = weights.endswith('.pt') 
