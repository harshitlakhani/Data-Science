      YOLOv5 v5.0 Release (#2762) 
         raise Exception(s) from e     def yolov5s(pretrained=True, channels=3, classes=80, autoshape=True):     """YOLOv5-small model from https://github.com/ultralytics/yolov5 def custom(path_or_model='path/to/model.pt', autoshape=True):     """YOLOv5-custom model https://github.com/ultralytics/yolov5       Arguments:         pretrained (bool): load pretrained weights into the model, default=False         channels (int): number of input channels, default=3         classes (int): number of model classes, default=80     Arguments (3 options):         path_or_model (str): 'path/to/model.pt'         path_or_model (dict): torch.load('path/to/model.pt')         path_or_model (nn.Module): torch.load('path/to/model.pt')['model']        Returns:          pytorch model      """     return create('yolov5s', pretrained, channels, classes, autoshape)     model = torch.load(path_or_model) if isinstance(path_or_model, str) else path_or_model  # load checkpoint     if isinstance(model, dict):         model = model['ema' if model.get('ema') else 'model']  # load model       hub_model = Model(model.yaml).to(next(model.parameters()).device)  # create     hub_model.load_state_dict(model.float().state_dict())  # load state_dict     hub_model.names = model.names  # class names     if autoshape:         hub_model = hub_model.autoshape()  # for file/URI/PIL/cv2/np inputs and NMS     device = select_device('0' if torch.cuda.is_available() else 'cpu')  # default to GPU if available     return hub_model.to(device)   def yolov5m(pretrained=True, channels=3, classes=80, autoshape=True):     """YOLOv5-medium model from https://github.com/ultralytics/yolov5       Arguments:         pretrained (bool): load pretrained weights into the model, default=False         channels (int): number of input channels, default=3         classes (int): number of model classes, default=80 def yolov5s(pretrained=True, channels=3, classes=80, autoshape=True):     # YOLOv5-small model https://github.com/ultralytics/yolov5     return create('yolov5s', pretrained, channels, classes, autoshape)       Returns:         pytorch model     """  def yolov5m(pretrained=True, channels=3, classes=80, autoshape=True):     # YOLOv5-medium model https://github.com/ultralytics/yolov5      return create('yolov5m', pretrained, channels, classes, autoshape)      def yolov5l(pretrained=True, channels=3, classes=80, autoshape=True):     """YOLOv5-large model from https://github.com/ultralytics/yolov5      Arguments:         pretrained (bool): load pretrained weights into the model, default=False         channels (int): number of input channels, default=3         classes (int): number of model classes, default=80      Returns:         pytorch model     """     # YOLOv5-large model https://github.com/ultralytics/yolov5      return create('yolov5l', pretrained, channels, classes, autoshape)      def yolov5x(pretrained=True, channels=3, classes=80, autoshape=True):     """YOLOv5-xlarge model from https://github.com/ultralytics/yolov5     # YOLOv5-xlarge model https://github.com/ultralytics/yolov5     return create('yolov5x', pretrained, channels, classes, autoshape)       Arguments:         pretrained (bool): load pretrained weights into the model, default=False         channels (int): number of input channels, default=3         classes (int): number of model classes, default=80       Returns:         pytorch model     """     return create('yolov5x', pretrained, channels, classes, autoshape) def yolov5s6(pretrained=True, channels=3, classes=80, autoshape=True):     # YOLOv5-small model https://github.com/ultralytics/yolov5     return create('yolov5s6', pretrained, channels, classes, autoshape)     def custom(path_or_model='path/to/model.pt', autoshape=True):     """YOLOv5-custom model from https://github.com/ultralytics/yolov5 def yolov5m6(pretrained=True, channels=3, classes=80, autoshape=True):     # YOLOv5-medium model https://github.com/ultralytics/yolov5     return create('yolov5m6', pretrained, channels, classes, autoshape)       Arguments (3 options):         path_or_model (str): 'path/to/model.pt'         path_or_model (dict): torch.load('path/to/model.pt')         path_or_model (nn.Module): torch.load('path/to/model.pt')['model']       Returns:         pytorch model     """     model = torch.load(path_or_model) if isinstance(path_or_model, str) else path_or_model  # load checkpoint     if isinstance(model, dict):         model = model['ema' if model.get('ema') else 'model']  # load model def yolov5l6(pretrained=True, channels=3, classes=80, autoshape=True):     # YOLOv5-large model https://github.com/ultralytics/yolov5     return create('yolov5l6', pretrained, channels, classes, autoshape)       hub_model = Model(model.yaml).to(next(model.parameters()).device)  # create     hub_model.load_state_dict(model.float().state_dict())  # load state_dict     hub_model.names = model.names  # class names     if autoshape:         hub_model = hub_model.autoshape()  # for file/URI/PIL/cv2/np inputs and NMS     device = select_device('0' if torch.cuda.is_available() else 'cpu')  # default to GPU if available     return hub_model.to(device)  def yolov5x6(pretrained=True, channels=3, classes=80, autoshape=True):     # YOLOv5-xlarge model https://github.com/ultralytics/yolov5     return create('yolov5x6', pretrained, channels, classes, autoshape)      if __name__ == '__main__': 
