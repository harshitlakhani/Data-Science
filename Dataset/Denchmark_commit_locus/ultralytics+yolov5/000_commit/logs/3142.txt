      Utils reorganization (#1392)          * Utils reorganization          * Add new utils files          * cleanup          * simplify          * reduce datasets.py          * remove evolve.sh          * loadWebcam cleanup 
     return labels     def reduce_img_size(path='path/images', img_size=1024):  # from utils.datasets import *; reduce_img_size()     # creates a new ./images_reduced folder with reduced size images of maximum size img_size     path_new = path + '_reduced'  # reduced images path     create_folder(path_new)     for f in tqdm(glob.glob('%s/*.*' % path)):         try:             img = cv2.imread(f)             h, w = img.shape[:2]             r = img_size / max(h, w)  # size ratio             if r < 1.0:                 img = cv2.resize(img, (int(w * r), int(h * r)), interpolation=cv2.INTER_AREA)  # _LINEAR fastest             fnew = f.replace(path, path_new)  # .replace(Path(f).suffix, '.jpg')             cv2.imwrite(fnew, img)         except:             print('WARNING: image failure %s' % f)   def recursive_dataset2bmp(dataset='path/dataset_bmp'):  # from utils.datasets import *; recursive_dataset2bmp()     # Converts dataset to bmp (for faster training)     formats = [x.lower() for x in img_formats] + [x.upper() for x in img_formats]     for a, b, files in os.walk(dataset):         for file in tqdm(files, desc=a):             p = a + '/' + file             s = Path(file).suffix             if s == '.txt':  # replace text                 with open(p, 'r') as f:                     lines = f.read()                 for f in formats:                     lines = lines.replace(f, '.bmp')                 with open(p, 'w') as f:                     f.write(lines)             elif s in formats:  # replace image                 cv2.imwrite(p.replace(s, '.bmp'), cv2.imread(p))                 if s != '.bmp':                     os.system("rm '%s'" % p)   def imagelist2folder(path='path/images.txt'):  # from utils.datasets import *; imagelist2folder()     # Copies all the images in a text file (list of images) into a folder     create_folder(path[:-4])     with open(path, 'r') as f:         for line in f.read().splitlines():             os.system('cp "%s" %s' % (line, path[:-4]))             print(line)    def create_folder(path='./new'):      # Create folder      if os.path.exists(path): 
