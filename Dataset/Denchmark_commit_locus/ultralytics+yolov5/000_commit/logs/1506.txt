      hyperparameter evolution bug fix (#566) 
     if opt.local_rank != -1:          assert torch.cuda.device_count() > opt.local_rank          torch.cuda.set_device(opt.local_rank)         device = torch.device("cuda", opt.local_rank)         device = torch.device('cuda', opt.local_rank)          dist.init_process_group(backend='nccl', init_method='env://')  # distributed backend          opt.world_size = dist.get_world_size()         assert opt.batch_size % opt.world_size == 0, "Batch size is not a multiple of the number of devices given!"         assert opt.batch_size % opt.world_size == 0, '--batch-size must be multiple of CUDA device count'          opt.batch_size = opt.total_batch_size // opt.world_size        print(opt)        # Train      if not opt.evolve:         tb_writer = None          if opt.local_rank in [-1, 0]:              print('Start Tensorboard with "tensorboard --logdir=runs", view at http://localhost:6006/')              tb_writer = SummaryWriter(log_dir=increment_dir('runs/exp', opt.name))         else:             tb_writer = None           train(hyp, tb_writer, opt, device)         train(hyp, opt, device, tb_writer)        # Evolve hyperparameters (optional)      else:         assert opt.local_rank == -1, 'DDP mode not implemented for --evolve'         # Hyperparameter evolution metadata (mutation scale 0-1, lower_limit, upper_limit)         meta = {'lr0': (1, 1e-5, 1e-2),  # initial learning rate (SGD=1E-2, Adam=1E-3)                 'momentum': (0.1, 0.6, 0.98),  # SGD momentum/Adam beta1                 'weight_decay': (1, 0.0, 0.001),  # optimizer weight decay                 'giou': (1, 0.02, 0.2),  # GIoU loss gain                 'cls': (1, 0.2, 4.0),  # cls loss gain                 'cls_pw': (1, 0.5, 2.0),  # cls BCELoss positive_weight                 'obj': (1, 0.2, 4.0),  # obj loss gain (scale with pixels)                 'obj_pw': (1, 0.5, 2.0),  # obj BCELoss positive_weight                 'iou_t': (0, 0.1, 0.7),  # IoU training threshold                 'anchor_t': (1, 2.0, 8.0),  # anchor-multiple threshold                 'fl_gamma': (0, 0.0, 2.0),  # focal loss gamma (efficientDet default gamma=1.5)                 'hsv_h': (1, 0.0, 0.1),  # image HSV-Hue augmentation (fraction)                 'hsv_s': (1, 0.0, 0.8),  # image HSV-Saturation augmentation (fraction)                 'hsv_v': (1, 0.0, 0.8),  # image HSV-Value augmentation (fraction)                 'degrees': (1, 0.0, 45.0),  # image rotation (+/- deg)                 'translate': (1, 0.0, 0.9),  # image translation (+/- fraction)                 'scale': (1, 0.0, 0.9),  # image scale (+/- gain)                 'shear': (1, 0.0, 10.0),  # image shear (+/- deg)                 'perspective': (1, 0.0, 0.001),  # image perspective (+/- fraction), range 0-0.001                 'flipud': (0, 0.0, 1.0),  # image flip up-down (probability)                 'fliplr': (1, 0.0, 1.0),  # image flip left-right (probability)                 'mixup': (1, 0.0, 1.0)}  # image mixup (probability)           tb_writer = None         assert opt.local_rank == -1, 'DDP mode not implemented for --evolve'          opt.notest, opt.nosave = True, True  # only test/save final epoch         # ei = [isinstance(x, (int, float)) for x in hyp.values()]  # evolvable indices          if opt.bucket:              os.system('gsutil cp gs://%s/evolve.txt .' % opt.bucket)  # download evolve.txt if exists   
