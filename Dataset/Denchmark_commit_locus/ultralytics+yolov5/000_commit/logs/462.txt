      Update test.py for IoU in native image-space (#1439)          * Update test.py for IoU in native image-space          * remove redundant          * gn to device          * remove output scale_coords          * --img-size correction          * update          * native-space labels          * pred to predn          * remove clip_coords() 
                              "box_caption": "%s %.3f" % (names[cls], conf),                               "scores": {"class_score": conf},                               "domain": "pixel"} for *xyxy, conf, cls in pred.tolist()]                 boxes = {"predictions": {"box_data": box_data, "class_labels": names}}                 boxes = {"predictions": {"box_data": box_data, "class_labels": names}}  # inference-space                  wandb_images.append(wandb.Image(img[si], boxes=boxes, caption=path.name))               # Clip boxes to image bounds             clip_coords(pred, (height, width))               # Append to pycocotools JSON dictionary              if save_json:                  # [{"image_id": 42, "category_id": 18, "bbox": [258.15, 41.29, 348.26, 243.78], "score": 0.236}, ...                  image_id = int(path.stem) if path.stem.isnumeric() else path.stem                 box = pred[:, :4].clone()  # xyxy                 scale_coords(img[si].shape[1:], box, shapes[si][0], shapes[si][1])  # to original shape                 box = xyxy2xywh(box)  # xywh                 box = xyxy2xywh(predn[:, :4])  # xywh                  box[:, :2] -= box[:, 2:] / 2  # xy center to top-left corner                  for p, b in zip(pred.tolist(), box.tolist()):                      jdict.append({'image_id': image_id, 
