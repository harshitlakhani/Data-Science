      Add `--include torchscript onnx coreml` argument (#3137)          * Allow users to skip exporting in formats that they don't care about          * Correct comments          * Update export.py          renamed --skip-format to --exclude          * Switched format from exclude to include (as instructed by @glenn-jocher)          * cleanup          Co-authored-by: Glenn Jocher <glenn.jocher@ultralytics.com> 
     print(f"\n{colorstr('PyTorch:')} starting from {opt.weights} ({file_size(opt.weights):.1f} MB)")        # TorchScript export -----------------------------------------------------------------------------------------------     prefix = colorstr('TorchScript:')     try:         print(f'\n{prefix} starting export with torch {torch.__version__}...')         f = opt.weights.replace('.pt', '.torchscript.pt')  # filename         ts = torch.jit.trace(model, img, strict=False)         (optimize_for_mobile(ts) if opt.optimize else ts).save(f)         print(f'{prefix} export success, saved as {f} ({file_size(f):.1f} MB)')     except Exception as e:         print(f'{prefix} export failure: {e}')     if 'torchscript' in opt.include or 'coreml' in opt.include:         prefix = colorstr('TorchScript:')         try:             print(f'\n{prefix} starting export with torch {torch.__version__}...')             f = opt.weights.replace('.pt', '.torchscript.pt')  # filename             ts = torch.jit.trace(model, img, strict=False)             (optimize_for_mobile(ts) if opt.optimize else ts).save(f)             print(f'{prefix} export success, saved as {f} ({file_size(f):.1f} MB)')         except Exception as e:             print(f'{prefix} export failure: {e}')        # ONNX export ------------------------------------------------------------------------------------------------------     prefix = colorstr('ONNX:')     try:         import onnx          print(f'{prefix} starting export with onnx {onnx.__version__}...')         f = opt.weights.replace('.pt', '.onnx')  # filename         torch.onnx.export(model, img, f, verbose=False, opset_version=12, input_names=['images'],                           dynamic_axes={'images': {0: 'batch', 2: 'height', 3: 'width'},  # size(1,3,640,640)                                         'output': {0: 'batch', 2: 'y', 3: 'x'}} if opt.dynamic else None)          # Checks         model_onnx = onnx.load(f)  # load onnx model         onnx.checker.check_model(model_onnx)  # check onnx model         # print(onnx.helper.printable_graph(model_onnx.graph))  # print          # Simplify         if opt.simplify:             try:                 check_requirements(['onnx-simplifier'])                 import onnxsim                  print(f'{prefix} simplifying with onnx-simplifier {onnxsim.__version__}...')                 model_onnx, check = onnxsim.simplify(model_onnx,                                                      dynamic_input_shape=opt.dynamic,                                                      input_shapes={'images': list(img.shape)} if opt.dynamic else None)                 assert check, 'assert check failed'                 onnx.save(model_onnx, f)             except Exception as e:                 print(f'{prefix} simplifier failure: {e}')         print(f'{prefix} export success, saved as {f} ({file_size(f):.1f} MB)')     except Exception as e:         print(f'{prefix} export failure: {e}')     if 'onnx' in opt.include:         prefix = colorstr('ONNX:')         try:             import onnx              print(f'{prefix} starting export with onnx {onnx.__version__}...')             f = opt.weights.replace('.pt', '.onnx')  # filename             torch.onnx.export(model, img, f, verbose=False, opset_version=12, input_names=['images'],                               dynamic_axes={'images': {0: 'batch', 2: 'height', 3: 'width'},  # size(1,3,640,640)                                             'output': {0: 'batch', 2: 'y', 3: 'x'}} if opt.dynamic else None)              # Checks             model_onnx = onnx.load(f)  # load onnx model             onnx.checker.check_model(model_onnx)  # check onnx model             # print(onnx.helper.printable_graph(model_onnx.graph))  # print              # Simplify             if opt.simplify:                 try:                     check_requirements(['onnx-simplifier'])                     import onnxsim                      print(f'{prefix} simplifying with onnx-simplifier {onnxsim.__version__}...')                     model_onnx, check = onnxsim.simplify(                         model_onnx,                         dynamic_input_shape=opt.dynamic,                         input_shapes={'images': list(img.shape)} if opt.dynamic else None)                     assert check, 'assert check failed'                     onnx.save(model_onnx, f)                 except Exception as e:                     print(f'{prefix} simplifier failure: {e}')             print(f'{prefix} export success, saved as {f} ({file_size(f):.1f} MB)')         except Exception as e:             print(f'{prefix} export failure: {e}')        # CoreML export ----------------------------------------------------------------------------------------------------     prefix = colorstr('CoreML:')     try:         import coremltools as ct          print(f'{prefix} starting export with coremltools {ct.__version__}...')         model = ct.convert(ts, inputs=[ct.ImageType(name='image', shape=img.shape, scale=1 / 255.0, bias=[0, 0, 0])])         f = opt.weights.replace('.pt', '.mlmodel')  # filename         model.save(f)         print(f'{prefix} export success, saved as {f} ({file_size(f):.1f} MB)')     except Exception as e:         print(f'{prefix} export failure: {e}')     if 'coreml' in opt.include:         prefix = colorstr('CoreML:')         try:             import coremltools as ct              print(f'{prefix} starting export with coremltools {ct.__version__}...')             model = ct.convert(ts, inputs=[ct.ImageType('image', shape=img.shape, scale=1 / 255.0, bias=[0, 0, 0])])             f = opt.weights.replace('.pt', '.mlmodel')  # filename             model.save(f)             print(f'{prefix} export success, saved as {f} ({file_size(f):.1f} MB)')         except Exception as e:             print(f'{prefix} export failure: {e}')        # Finish      print(f'\nExport complete ({time.time() - t:.2f}s). Visualize with https://github.com/lutzroeder/netron.') 
