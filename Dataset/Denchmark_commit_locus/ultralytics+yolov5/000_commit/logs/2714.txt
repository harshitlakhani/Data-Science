      Initial model ensemble capability #318 
          dataloader=None,           merge=False):      # Initialize/load model and set device     if model is None:         training = False         merge = opt.merge  # use Merge NMS     training = model is not None     if training:  # called by train.py         device = next(model.parameters()).device  # get model device      else:  # called directly          device = torch_utils.select_device(opt.device, batch_size=batch_size)         merge = opt.merge  # use Merge NMS            # Remove previous          for f in glob.glob('test_batch*.jpg'):              os.remove(f)            # Load model         google_utils.attempt_download(weights)         model = torch.load(weights, map_location=device)['model'].float().fuse().to(device)  # load to FP32         model = attempt_load(weights, map_location=device)  # load FP32 model          imgsz = check_img_size(imgsz, s=model.stride.max())  # check img_size            # Multi-GPU disabled, incompatible with .half() https://github.com/ultralytics/yolov5/issues/99          # if device.type != 'cpu' and torch.cuda.device_count() > 1:          #     model = nn.DataParallel(model)       else:  # called by train.py         training = True         device = next(model.parameters()).device  # get model device       # Half      half = device.type != 'cpu' and torch.cuda.device_count() == 1  # half precision only supported on single-GPU      if half: 
