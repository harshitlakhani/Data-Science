      Update DDP for `torch.distributed.run` with `gloo` backend (#3680)          * Update DDP for `torch.distributed.run`          * Add LOCAL_RANK          * remove opt.local_rank          * backend="gloo|nccl"          * print          * print          * debug          * debug          * os.getenv          * gloo          * gloo          * gloo          * cleanup          * fix getenv          * cleanup          * cleanup destroy          * try nccl          * return opt          * add --local_rank          * add timeout          * add init_method          * gloo          * move destroy          * move destroy          * move print(opt) under if RANK          * destroy only RANK 0          * move destroy inside train()          * restore destroy outside train()          * update print(opt)          * cleanup          * nccl          * gloo with 60 second timeout          * update namespace printing 
         # Update image weights (optional)          if opt.image_weights:              # Generate indices             if rank in [-1, 0]:             if RANK in [-1, 0]:                  cw = model.class_weights.cpu().numpy() * (1 - maps) ** 2 / nc  # class weights                  iw = labels_to_image_weights(dataset.labels, nc=nc, class_weights=cw)  # image weights                  dataset.indices = random.choices(range(dataset.n), weights=iw, k=dataset.n)  # rand weighted idx              # Broadcast if DDP             if rank != -1:                 indices = (torch.tensor(dataset.indices) if rank == 0 else torch.zeros(dataset.n)).int()             if RANK != -1:                 indices = (torch.tensor(dataset.indices) if RANK == 0 else torch.zeros(dataset.n)).int()                  dist.broadcast(indices, 0)                 if rank != 0:                 if RANK != 0:                      dataset.indices = indices.cpu().numpy()            # Update mosaic border 
