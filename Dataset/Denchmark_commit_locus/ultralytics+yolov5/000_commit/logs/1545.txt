      classifier, export, torch seed updates 
     opt.img_size *= 2 if len(opt.img_size) == 1 else 1  # expand      print(opt)      set_logging()     t = time.time()        # Input      img = torch.zeros((opt.batch_size, 3, *opt.img_size))  # image size(1,3,320,192) iDetection        # Load PyTorch model      model = attempt_load(opt.weights, map_location=torch.device('cpu'))  # load FP32 model     labels = model.names      # Checks     gs = int(max(model.stride))  # grid size (max stride)     opt.img_size = [check_img_size(x, gs) for x in opt.img_size]  # verify img_size are gs-multiples        # Update model      for k, m in model.named_modules():         m._non_persistent_buffers_set = set()  # pytorch 1.6.0 compatability         m._non_persistent_buffers_set = set()  # pytorch 1.6.0 compatibility          if isinstance(m, models.common.Conv) and isinstance(m.act, nn.Hardswish):              m.act = Hardswish()  # assign activation          # if isinstance(m, models.yolo.Detect): 
