      update detect.py 
     parser.add_argument('--img-size', type=int, default=640, help='inference size (pixels)')      parser.add_argument('--conf-thres', type=float, default=0.4, help='object confidence threshold')      parser.add_argument('--iou-thres', type=float, default=0.5, help='IOU threshold for NMS')     parser.add_argument('--fourcc', type=str, default='mp4v', help='output video codec (verify ffmpeg support)')      parser.add_argument('--device', default='', help='cuda device, i.e. 0 or 0,1,2,3 or cpu')      parser.add_argument('--view-img', action='store_true', help='display results')      parser.add_argument('--save-txt', action='store_true', help='save results to *.txt')      parser.add_argument('--classes', nargs='+', type=int, help='filter by class')      parser.add_argument('--agnostic-nms', action='store_true', help='class-agnostic NMS')      parser.add_argument('--augment', action='store_true', help='augmented inference')     parser.add_argument('--update', action='store_true', help='update all models')      opt = parser.parse_args()      print(opt)        with torch.no_grad():         detect()          # # Update all models         # for opt.weights in ['yolov5s.pt', 'yolov5m.pt', 'yolov5l.pt', 'yolov5x.pt', 'yolov3-spp.pt']:         #     detect()         #     create_pretrained(opt.weights, opt.weights)         if opt.update:  # update all models (to fix SourceChangeWarning)             for opt.weights in ['yolov5s.pt', 'yolov5m.pt', 'yolov5l.pt', 'yolov5x.pt', 'yolov3-spp.pt']:                 detect()                 create_pretrained(opt.weights, opt.weights)         else:             detect() 
