      update train.py gsutil bucket fix (#463) 
     # plot_lr_scheduler(optimizer, scheduler, epochs)        # DP mode     if device.type != 'cpu' and local_rank == -1 and torch.cuda.device_count() > 1:     if device.type != 'cpu' and rank == -1 and torch.cuda.device_count() > 1:          model = torch.nn.DataParallel(model)       # Exponential moving average     # From https://github.com/rwightman/pytorch-image-models/blob/master/train.py:     # "Important to create EMA model after cuda(), DP wrapper, and AMP but before SyncBN and DDP wrapper"     # chenyzsjtu: ema should be placed before after SyncBN. As SyncBN introduces new modules.     if opt.sync_bn and device.type != 'cpu' and local_rank != -1:         print("SyncBN activated!")     # SyncBatchNorm     if opt.sync_bn and device.type != 'cpu' and rank != -1:          model = torch.nn.SyncBatchNorm.convert_sync_batchnorm(model).to(device)     ema = torch_utils.ModelEMA(model) if local_rank in [-1, 0] else None         print('Using SyncBatchNorm()')      # Exponential moving average     ema = torch_utils.ModelEMA(model) if rank in [-1, 0] else None        # DDP mode     if device.type != 'cpu' and local_rank != -1:         model = DDP(model, device_ids=[local_rank], output_device=local_rank)     if device.type != 'cpu' and rank != -1:         model = DDP(model, device_ids=[rank], output_device=rank)        # Trainloader      dataloader, dataset = create_dataloader(train_path, imgsz, batch_size, gs, opt, hyp=hyp, augment=True,                                             cache=opt.cache_images, rect=opt.rect, local_rank=local_rank,                                             cache=opt.cache_images, rect=opt.rect, local_rank=rank,                                              world_size=opt.world_size)      mlc = np.concatenate(dataset.labels, 0)[:, 0].max()  # max label class      nb = len(dataloader)  # number of batches      assert mlc < nc, 'Label class %g exceeds nc=%g in %s. Possible class labels are 0-%g' % (mlc, nc, opt.data, nc - 1)        # Testloader     if local_rank in [-1, 0]:     if rank in [-1, 0]:          # local_rank is set to -1. Because only the first process is expected to do evaluation.          testloader = create_dataloader(test_path, imgsz_test, total_batch_size, gs, opt, hyp=hyp, augment=False,                                         cache=opt.cache_images, rect=True, local_rank=-1, world_size=opt.world_size)[0] 
