      YouTube Livestream Detection (#2752)          * Youtube livestream detection          * dependancy update to auto install pafy          * Remove print          * include youtube_dl in deps          * PEP8 reformat          * youtube url check fix          * reduce lines          * add comment          * update check_requirements          * stream framerate fix          * Update README.md          * cleanup          * PEP8          * remove cap.retrieve() failure code          Co-authored-by: Glenn Jocher <glenn.jocher@ultralytics.com> 
         for i, s in enumerate(sources):              # Start the thread to read frames from the video stream              print(f'{i + 1}/{n}: {s}... ', end='')             cap = cv2.VideoCapture(eval(s) if s.isnumeric() else s)             url = eval(s) if s.isnumeric() else s             if 'youtube.com/' in url or 'youtu.be/' in url:  # if source is YouTube video                 check_requirements(('pafy', 'youtube_dl'))                 import pafy                 url = pafy.new(url).getbest(preftype="mp4").url             cap = cv2.VideoCapture(url)              assert cap.isOpened(), f'Failed to open {s}'              w = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))              h = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))             fps = cap.get(cv2.CAP_PROP_FPS) % 100             self.fps = cap.get(cv2.CAP_PROP_FPS) % 100               _, self.imgs[i] = cap.read()  # guarantee first frame              thread = Thread(target=self.update, args=([i, cap]), daemon=True)             print(f' success ({w}x{h} at {fps:.2f} FPS).')             print(f' success ({w}x{h} at {self.fps:.2f} FPS).')              thread.start()          print('')  # newline   
