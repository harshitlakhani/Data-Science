      Update train.py 
     model.gr = 1.0  # giou loss ratio (obj_loss = 1.0 or giou)      model.class_weights = labels_to_class_weights(dataset.labels, nc).to(device)  # attach class weights      model.names = data_dict['names']          # Initialize distributed training     if device.type != 'cpu' and torch.cuda.device_count() > 1 and torch.distributed.is_available():         dist.init_process_group(backend='nccl',  # distributed backend                                 init_method='tcp://127.0.0.1:9999',  # init method                                 world_size=1,  # number of nodes                                 rank=0)  # node rank         model = torch.nn.parallel.DistributedDataParallel(model)         # pip install torch==1.4.0+cu100 torchvision==0.5.0+cu100 -f https://download.pytorch.org/whl/torch_stable.html        # Class frequency      labels = np.concatenate(dataset.labels, 0) 
