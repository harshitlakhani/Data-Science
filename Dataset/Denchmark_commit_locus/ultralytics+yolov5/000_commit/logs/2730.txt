      Improved W&B integration  (#2125)          * Init Commit          * new wandb integration          * Update          * Use data_dict in test          * Updates          * Update: scope of log_img          * Update: scope of log_img          * Update          * Update: Fix logging conditions          * Add tqdm bar, support for .txt dataset format          * Improve Result table Logger          * Init Commit          * new wandb integration          * Update          * Use data_dict in test          * Updates          * Update: scope of log_img          * Update: scope of log_img          * Update          * Update: Fix logging conditions          * Add tqdm bar, support for .txt dataset format          * Improve Result table Logger          * Add dataset creation in training script          * Change scope: self.wandb_run          * Add wandb-artifact:// natively          you can now use --resume with wandb run links          * Add suuport for logging dataset while training          * Cleanup          * Fix: Merge conflict          * Fix: CI tests          * Automatically use wandb config          * Fix: Resume          * Fix: CI          * Enhance: Using val_table          * More resume enhancement          * FIX : CI          * Add alias          * Get useful opt config data          * train.py cleanup          * Cleanup train.py          * more cleanup          * Cleanup| CI fix          * Reformat using PEP8          * FIX:CI          * rebase          * remove uneccesary changes          * remove uneccesary changes          * remove uneccesary changes          * remove unecessary chage from test.py          * FIX: resume from local checkpoint          * FIX:resume          * FIX:resume          * Reformat          * Performance improvement          * Fix local resume          * Fix local resume          * FIX:CI          * Fix: CI          * Imporve image logging          * (:(:Redo CI tests:):)          * Remember epochs when resuming          * Remember epochs when resuming          * Update DDP location          Potential fix for #2405          * PEP8 reformat          * 0.25 confidence threshold          * reset train.py plots syntax to previous          * reset epochs completed syntax to previous          * reset space to previous          * remove brackets          * reset comment to previous          * Update: is_coco check, remove unused code          * Remove redundant print statement          * Remove wandb imports          * remove dsviz logger from test.py          * Remove redundant change from test.py          * remove redundant changes from train.py          * reformat and improvements          * Fix typo          * Add tqdm tqdm progress when scanning files, naming improvements          Co-authored-by: Glenn Jocher <glenn.jocher@ultralytics.com> 
                     with open(save_dir / 'labels' / (path.stem + '.txt'), 'a') as f:                          f.write(('%g ' * len(line)).rstrip() % line + '\n')               # W&B logging             if plots and len(wandb_images) < log_imgs:                 box_data = [{"position": {"minX": xyxy[0], "minY": xyxy[1], "maxX": xyxy[2], "maxY": xyxy[3]},                              "class_id": int(cls),                              "box_caption": "%s %.3f" % (names[cls], conf),                              "scores": {"class_score": conf},                              "domain": "pixel"} for *xyxy, conf, cls in pred.tolist()]                 boxes = {"predictions": {"box_data": box_data, "class_labels": names}}  # inference-space                 wandb_images.append(wandb.Image(img[si], boxes=boxes, caption=path.name))             # W&B logging - Media Panel Plots             if len(wandb_images) < log_imgs and wandb_logger.current_epoch > 0:  # Check for test operation                 if wandb_logger.current_epoch % wandb_logger.bbox_interval == 0:                     box_data = [{"position": {"minX": xyxy[0], "minY": xyxy[1], "maxX": xyxy[2], "maxY": xyxy[3]},                                  "class_id": int(cls),                                  "box_caption": "%s %.3f" % (names[cls], conf),                                  "scores": {"class_score": conf},                                  "domain": "pixel"} for *xyxy, conf, cls in pred.tolist()]                     boxes = {"predictions": {"box_data": box_data, "class_labels": names}}  # inference-space                     wandb_images.append(wandb_logger.wandb.Image(img[si], boxes=boxes, caption=path.name))                 wandb_logger.log_training_progress(predn, path, names)  # logs dsviz tables                # Append to pycocotools JSON dictionary              if save_json: 
