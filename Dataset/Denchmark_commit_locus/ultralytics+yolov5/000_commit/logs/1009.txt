      Label caching foundational re-write #306 
         self.stride = stride            # Define labels         self.label_files = [x.replace('images', 'labels').replace(os.path.splitext(x)[-1], '.txt')                             for x in self.img_files]          # Read image shapes (wh)         sp = path.replace('.txt', '') + '.shapes'  # shapefile path         try:             with open(sp, 'r') as f:  # read existing shapefile                 s = [x.split() for x in f.read().splitlines()]                 assert len(s) == n, 'Shapefile out of sync'         except:             s = [exif_size(Image.open(f)) for f in tqdm(self.img_files, desc='Reading image shapes')]             np.savetxt(sp, s, fmt='%g')  # overwrites existing (if any)         self.label_files = [x.replace('images', 'labels').replace(os.path.splitext(x)[-1], '.txt') for x in                             self.img_files]          # Check cache         cache_path = str(Path(self.label_files[0]).parent) + '.cache'  # cached labels         if os.path.isfile(cache_path):             cache = torch.load(cache_path)  # load             if cache['hash'] != get_hash(self.label_files + self.img_files):  # dataset changed                 cache = self.cache_labels(cache_path)  # re-cache         else:             cache = self.cache_labels(cache_path)  # cache           self.shapes = np.array(s, dtype=np.float64)         # Get labels         labels, shapes = zip(*[cache[x] for x in self.img_files])         self.shapes = np.array(shapes, dtype=np.float64)         self.labels = list(labels)            # Rectangular Training  https://github.com/ultralytics/yolov3/issues/232          if self.rect: 
