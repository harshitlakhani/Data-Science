      Refactor models/export.py arguments (#3564)          * Refactor models/export.py arguments          * cleanup          * cleanup 
             elif isinstance(m.act, nn.SiLU):                  m.act = SiLU()          elif isinstance(m, models.yolo.Detect):             m.inplace = opt.inplace             m.onnx_dynamic = opt.dynamic             m.inplace = inplace             m.onnx_dynamic = dynamic              # m.forward = m.forward_export  # assign forward (optional)        for _ in range(2):          y = model(img)  # dry runs     print(f"\n{colorstr('PyTorch:')} starting from {opt.weights} ({file_size(opt.weights):.1f} MB)")     print(f"\n{colorstr('PyTorch:')} starting from {weights} ({file_size(weights):.1f} MB)")        # TorchScript export -----------------------------------------------------------------------------------------------     if 'torchscript' in opt.include or 'coreml' in opt.include:     if 'torchscript' in include or 'coreml' in include:          prefix = colorstr('TorchScript:')          try:              print(f'\n{prefix} starting export with torch {torch.__version__}...')             f = opt.weights.replace('.pt', '.torchscript.pt')  # filename             f = weights.replace('.pt', '.torchscript.pt')  # filename              ts = torch.jit.trace(model, img, strict=False)             (optimize_for_mobile(ts) if opt.optimize else ts).save(f)             (optimize_for_mobile(ts) if optimize else ts).save(f)              print(f'{prefix} export success, saved as {f} ({file_size(f):.1f} MB)')          except Exception as e:              print(f'{prefix} export failure: {e}')        # ONNX export ------------------------------------------------------------------------------------------------------     if 'onnx' in opt.include:     if 'onnx' in include:          prefix = colorstr('ONNX:')          try:              import onnx                print(f'{prefix} starting export with onnx {onnx.__version__}...')             f = opt.weights.replace('.pt', '.onnx')  # filename             torch.onnx.export(model, img, f, verbose=False, opset_version=opt.opset_version,                               training=torch.onnx.TrainingMode.TRAINING if opt.train else torch.onnx.TrainingMode.EVAL,                               do_constant_folding=not opt.train,             f = weights.replace('.pt', '.onnx')  # filename             torch.onnx.export(model, img, f, verbose=False, opset_version=opset_version,                               training=torch.onnx.TrainingMode.TRAINING if train else torch.onnx.TrainingMode.EVAL,                               do_constant_folding=not train,                                input_names=['images'],                                output_names=['output'],                                dynamic_axes={'images': {0: 'batch', 2: 'height', 3: 'width'},  # shape(1,3,640,640)                                              'output': {0: 'batch', 1: 'anchors'}  # shape(1,25200,85)                                             } if opt.dynamic else None)                                             } if dynamic else None)                # Checks              model_onnx = onnx.load(f)  # load onnx model 
