      Refactor detect.py arguments (#3559)          * Refactor detect.py arguments          @SkalskiP @KalenMike          * unused ok          * comment arguments 
         s = f"\n{len(list(save_dir.glob('labels/*.txt')))} labels saved to {save_dir / 'labels'}" if save_txt else ''          print(f"Results saved to {save_dir}{s}")       if update:         strip_optimizer(weights)  # update model (to fix SourceChangeWarning)       print(f'Done. ({time.time() - t0:.3f}s)')      if __name__ == '__main__':      parser = argparse.ArgumentParser()      parser.add_argument('--weights', nargs='+', type=str, default='yolov5s.pt', help='model.pt path(s)')     parser.add_argument('--source', type=str, default='data/images', help='source')  # file/folder, 0 for webcam     parser.add_argument('--img-size', type=int, default=640, help='inference size (pixels)')     parser.add_argument('--conf-thres', type=float, default=0.25, help='object confidence threshold')     parser.add_argument('--iou-thres', type=float, default=0.45, help='IOU threshold for NMS')     parser.add_argument('--max-det', type=int, default=1000, help='maximum number of detections per image')     parser.add_argument('--source', type=str, default='data/images', help='file/dir/URL/glob, 0 for webcam')     parser.add_argument('--imgsz', '--img', '--img-size', type=int, default=640, help='inference size (pixels)')     parser.add_argument('--conf-thres', type=float, default=0.25, help='confidence threshold')     parser.add_argument('--iou-thres', type=float, default=0.45, help='NMS IOU threshold')     parser.add_argument('--max-det', type=int, default=1000, help='maximum detections per image')      parser.add_argument('--device', default='', help='cuda device, i.e. 0 or 0,1,2,3 or cpu')     parser.add_argument('--view-img', action='store_true', help='display results')     parser.add_argument('--view-img', action='store_true', help='show results')      parser.add_argument('--save-txt', action='store_true', help='save results to *.txt')      parser.add_argument('--save-conf', action='store_true', help='save confidences in --save-txt labels')      parser.add_argument('--save-crop', action='store_true', help='save cropped prediction boxes') 
