      Refactor detect.py arguments (#3559)          * Refactor detect.py arguments          @SkalskiP @KalenMike          * unused ok          * comment arguments 
     @torch.no_grad() def detect(opt):     source, weights, view_img, save_txt, imgsz = opt.source, opt.weights, opt.view_img, opt.save_txt, opt.img_size     save_img = not opt.nosave and not source.endswith('.txt')  # save inference images def detect(weights='yolov5s.pt',  # model.pt path(s)            source='data/images',  # file/dir/URL/glob, 0 for webcam            imgsz=640,  # inference size (pixels)            conf_thres=0.25,  # confidence threshold            iou_thres=0.45,  # NMS IOU threshold            max_det=1000,  # maximum detections per image            device='',  # cuda device, i.e. 0 or 0,1,2,3 or cpu            view_img=False,  # show results            save_txt=False,  # save results to *.txt            save_conf=False,  # save confidences in --save-txt labels            save_crop=False,  # save cropped prediction boxes            nosave=False,  # do not save images/videos            classes=None,  # filter by class: --class 0, or --class 0 2 3            agnostic_nms=False,  # class-agnostic NMS            augment=False,  # augmented inference            update=False,  # update all models            project='runs/detect',  # save results to project/name            name='exp',  # save results to project/name            exist_ok=False,  # existing project/name ok, do not increment            line_thickness=3,  # bounding box thickness (pixels)            hide_labels=False,  # hide labels            hide_conf=False,  # hide confidences            half=False,  # use FP16 half-precision inference            ):     save_img = not nosave and not source.endswith('.txt')  # save inference images      webcam = source.isnumeric() or source.endswith('.txt') or source.lower().startswith(          ('rtsp://', 'rtmp://', 'http://', 'https://'))        # Directories     save_dir = increment_path(Path(opt.project) / opt.name, exist_ok=opt.exist_ok)  # increment run     save_dir = increment_path(Path(project) / name, exist_ok=exist_ok)  # increment run      (save_dir / 'labels' if save_txt else save_dir).mkdir(parents=True, exist_ok=True)  # make dir        # Initialize      set_logging()     device = select_device(opt.device)     half = opt.half and device.type != 'cpu'  # half precision only supported on CUDA     device = select_device(device)     half &= device.type != 'cpu'  # half precision only supported on CUDA        # Load model      model = attempt_load(weights, map_location=device)  # load FP32 model 
