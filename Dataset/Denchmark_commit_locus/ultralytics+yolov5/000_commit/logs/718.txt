      AutoAnchor update - improvement check 
     anchors = model.module.model[-1].anchor_grid if hasattr(model, 'module') else model.model[-1].anchor_grid      shapes = imgsz * dataset.shapes / dataset.shapes.max(1, keepdims=True)      wh = torch.tensor(np.concatenate([l[:, 3:5] * s for s, l in zip(shapes, dataset.labels)])).float()  # wh     ratio = wh[:, None] / anchors.view(-1, 2).cpu()[None]  # ratio     m = torch.max(ratio, 1. / ratio).max(2)[0]  # max ratio     bpr = (m.min(1)[0] < thr).float().mean()  # best possible recall     # mr = (m < thr).float().mean()  # match ratio       def metric(k):  # compute metric         r = wh[:, None] / k[None]         x = torch.min(r, 1. / r).min(2)[0]  # ratio metric         best = x.max(1)[0]  # best_x         return (best > 1. / thr).float().mean()  # í˜»best possible recall      bpr = metric(anchors.clone().cpu().view(-1, 2))      print('Best Possible Recall (BPR) = %.3f' % bpr, end='')      if bpr < 0.99:  # threshold to recompute         print('. Generating new anchors for improved recall, please wait...' % bpr)         print('. Attempting to generate improved anchors, please wait...' % bpr)          new_anchors = kmean_anchors(dataset, n=9, img_size=640, thr=4.0, gen=1000, verbose=False)         anchors[:] = torch.tensor(new_anchors).view_as(anchors).type_as(anchors)         print('New anchors saved to model. Update model *.yaml to use these anchors in the future.')         new_bpr = metric(new_anchors.reshape(-1, 2))         if new_bpr > bpr:             anchors[:] = torch.tensor(new_anchors).view_as(anchors).type_as(anchors)             print('New anchors saved to model. Update model *.yaml to use these anchors in the future.')         else:             print('Original anchors better than new anchors. Proceeding with original anchors.')      print('')  # newline     
