      Fix list paths (#721)          * Add list paths on check_dataset          * missing raise statement          * Update general.py          Co-authored-by: Glenn Jocher <glenn.jocher@ultralytics.com> 
   def check_dataset(dict):      # Download dataset if not found     train, val = os.path.abspath(dict['train']), os.path.abspath(dict['val'])  # data paths     if not (os.path.exists(train) and os.path.exists(val)):         print('\nWARNING: Dataset not found, nonexistant paths: %s' % [train, val])         if 'download' in dict:             s = dict['download']             print('Attempting autodownload from: %s' % s)             if s.startswith('http') and s.endswith('.zip'):  # URL                 f = Path(s).name  # filename                 torch.hub.download_url_to_file(s, f)                 r = os.system('unzip -q %s -d ../ && rm %s' % (f, f))             else:  # bash script                 r = os.system(s)             print('Dataset autodownload %s\n' % ('success' if r == 0 else 'failure'))  # analyze return value         else:             Exception('Dataset autodownload unavailable.')     val, s = dict.get('val'), dict.get('download')     if val and len(val):         val = [os.path.abspath(x) for x in (val if isinstance(val, list) else [val])]  # val path         if not all(os.path.exists(x) for x in val):             print('\nWARNING: Dataset not found, nonexistant paths: %s' % [*val])             if s and len(s):  # download script                 print('Attempting autodownload from: %s' % s)                 if s.startswith('http') and s.endswith('.zip'):  # URL                     f = Path(s).name  # filename                     if platform.system() == 'Darwin':  # avoid MacOS python requests certificate error                         os.system('curl -L %s -o %s' % (s, f))                     else:                         torch.hub.download_url_to_file(s, f)                     r = os.system('unzip -q %s -d ../ && rm %s' % (f, f))  # unzip                 else:  # bash script                     r = os.system(s)                 print('Dataset autodownload %s\n' % ('success' if r == 0 else 'failure'))  # analyze return value             else:                 raise Exception('Dataset not found.')      def make_divisible(x, divisor): 
