      Update test.py profiling (#3555)          * Update test.py profiling          * half_precision to half          * inplace 
     names = {k: v for k, v in enumerate(model.names if hasattr(model, 'names') else model.module.names)}      coco91class = coco80_to_coco91_class()      s = ('%20s' + '%11s' * 6) % ('Class', 'Images', 'Labels', 'P', 'R', 'mAP@.5', 'mAP@.5:.95')     p, r, f1, mp, mr, map50, map, t0, t1 = 0., 0., 0., 0., 0., 0., 0., 0., 0.     p, r, f1, mp, mr, map50, map, t0, t1, t2 = 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.      loss = torch.zeros(3, device=device)      jdict, stats, ap, ap_class, wandb_images = [], [], [], [], []      for batch_i, (img, targets, paths, shapes) in enumerate(tqdm(dataloader, desc=s)):         t_ = time_synchronized()          img = img.to(device, non_blocking=True)          img = img.half() if half else img.float()  # uint8 to fp16/32          img /= 255.0  # 0 - 255 to 0.0 - 1.0          targets = targets.to(device)          nb, _, height, width = img.shape  # batch size, channels, height, width         t = time_synchronized()         t0 += t - t_            # Run model         t = time_synchronized()          out, train_out = model(img, augment=augment)  # inference and training outputs         t0 += time_synchronized() - t         t1 += time_synchronized() - t            # Compute loss          if compute_loss: 
