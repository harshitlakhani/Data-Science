      offset and balance update 
             a, t = at[j], t.repeat(na, 1, 1)[j]  # filter                # overlaps             g = 0.5  # offset              gxy = t[:, 2:4]  # grid xy              z = torch.zeros_like(gxy)              if style == 'rect2':                 g = 0.2  # offset                  j, k = ((gxy % 1. < g) & (gxy > 1.)).T                  a, t = torch.cat((a, a[j], a[k]), 0), torch.cat((t, t[j], t[k]), 0)                  offsets = torch.cat((z, z[j] + off[0], z[k] + off[1]), 0) * g                elif style == 'rect4':                 g = 0.5  # offset                  j, k = ((gxy % 1. < g) & (gxy > 1.)).T                  l, m = ((gxy % 1. > (1 - g)) & (gxy < (gain[[2, 3]] - 1.))).T                  a, t = torch.cat((a, a[j], a[k], a[l], a[m]), 0), torch.cat((t, t[j], t[k], t[l], t[m]), 0) 
