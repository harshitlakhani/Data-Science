      hyperparameter printout update 
     parser.add_argument('--multi-scale', action='store_true', help='vary img-size +/- 50%%')      parser.add_argument('--single-cls', action='store_true', help='train as single-class dataset')      opt = parser.parse_args()            last = get_latest_run() if opt.resume == 'get_last' else opt.resume  # resume from most recent run      if last and not opt.weights:          print(f'Resuming training from {last}')      opt.weights = last if opt.resume and not opt.weights else opt.weights      opt.cfg = check_file(opt.cfg)  # check file      opt.data = check_file(opt.data)  # check file     opt.hyp = check_file(opt.hyp) if opt.hyp else '' # check file     opt.hyp = check_file(opt.hyp) if opt.hyp else ''  # check file      print(opt)      opt.img_size.extend([opt.img_size[-1]] * (2 - len(opt.img_size)))  # extend to 2 sizes (train, test)      device = torch_utils.select_device(opt.device, apex=mixed_precision, batch_size=opt.batch_size) 
