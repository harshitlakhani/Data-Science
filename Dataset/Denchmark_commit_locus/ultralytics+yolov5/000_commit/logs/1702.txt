      Update labels_to_image_weights() (#1545) 
     def labels_to_image_weights(labels, nc=80, class_weights=np.ones(80)):     # Produces image weights based on class mAPs     n = len(labels)     class_counts = np.array([np.bincount(labels[i][:, 0].astype(np.int), minlength=nc) for i in range(n)])     # Produces image weights based on class_weights and image contents     class_counts = np.array([np.bincount(x[:, 0].astype(np.int), minlength=nc) for x in labels])      image_weights = (class_weights.reshape(1, nc) * class_counts).sum(1)      # index = random.choices(range(n), weights=image_weights, k=1)  # weight image sample      return image_weights 
