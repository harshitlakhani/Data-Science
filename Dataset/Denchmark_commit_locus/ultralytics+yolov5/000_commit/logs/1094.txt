      AutoAnchor implementation 
     def check_anchors(dataset, model, thr=4.0, imgsz=640):     # Check best possible recall of dataset with current anchors     # Check anchor fit to data, recompute if necessary     print('\nAnalyzing anchors... ', end='')      anchors = model.module.model[-1].anchor_grid if hasattr(model, 'module') else model.model[-1].anchor_grid      shapes = imgsz * dataset.shapes / dataset.shapes.max(1, keepdims=True)      wh = torch.tensor(np.concatenate([l[:, 3:5] * s for s, l in zip(shapes, dataset.labels)])).float()  # wh      ratio = wh[:, None] / anchors.view(-1, 2).cpu()[None]  # ratio      m = torch.max(ratio, 1. / ratio).max(2)[0]  # max ratio      bpr = (m.min(1)[0] < thr).float().mean()  # best possible recall     mr = (m < thr).float().mean()  # match ratio     print(('AutoAnchor labels:' + '%10s' * 6) % ('n', 'mean', 'min', 'max', 'matching', 'recall'))     print(('                  ' + '%10.4g' * 6) % (wh.shape[0], wh.mean(), wh.min(), wh.max(), mr, bpr))     assert bpr > 0.9, 'Best possible recall %.3g (BPR) below 0.9 threshold. Training cancelled. ' \                       'Compute new anchors with utils.utils.kmeans_anchors() and update model before training.' % bpr     # mr = (m < thr).float().mean()  # match ratio      print('Best Possible Recall (BPR) = %.3f' % bpr, end='')     if bpr < 0.99:  # threshold to recompute         print('. Generating new anchors for improved recall, please wait...' % bpr)         new_anchors = kmean_anchors(dataset, n=9, img_size=640, thr=4.0, gen=1000, verbose=False)         anchors[:] = torch.tensor(new_anchors).view_as(anchors).type_as(anchors)         print('New anchors saved to model. Update model *.yaml to use these anchors in the future.')     print('')  # newline      def check_file(file): 
