      Update test.py profiling (#3555)          * Update test.py profiling          * half_precision to half          * inplace 
              save_txt=opt.save_txt | opt.save_hybrid,               save_hybrid=opt.save_hybrid,               save_conf=opt.save_conf,              half_precision=opt.half,              half=opt.half,               opt=opt               )        elif opt.task == 'speed':  # speed benchmarks         for w in opt.weights:             test(opt.data, w, opt.batch_size, opt.img_size, 0.25, 0.45, save_json=False, plots=False, opt=opt)         for w in opt.weights if isinstance(opt.weights, list) else [opt.weights]:             test(opt.data, w, opt.batch_size, opt.img_size, 0.25, 0.45, save_json=False, plots=False, half=True,                  opt=opt)        elif opt.task == 'study':  # run over a range of settings and save/plot          # python test.py --task study --data coco.yaml --iou 0.7 --weights yolov5s.pt yolov5m.pt yolov5l.pt yolov5x.pt          x = list(range(256, 1536 + 128, 128))  # x axis (image sizes)         for w in opt.weights:         for w in opt.weights if isinstance(opt.weights, list) else [opt.weights]:              f = f'study_{Path(opt.data).stem}_{Path(w).stem}.txt'  # filename to save to              y = []  # y axis              for i in x:  # img-size                  print(f'\nRunning {f} point {i}...')                  r, _, t = test(opt.data, w, opt.batch_size, i, opt.conf_thres, opt.iou_thres, opt.save_json,                                plots=False, opt=opt)                                plots=False, half=True, opt=opt)                  y.append(r + t)  # results and times              np.savetxt(f, y, fmt='%10.4g')  # save          os.system('zip -r study.zip study_*.txt') 
