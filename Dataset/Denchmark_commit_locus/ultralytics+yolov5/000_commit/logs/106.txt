      Generalized regression criterion renaming (#1120) 
               # Write              with open(results_file, 'a') as f:                 f.write(s + '%10.4g' * 7 % results + '\n')  # P, R, mAP, F1, test_losses=(GIoU, obj, cls)                 f.write(s + '%10.4g' * 7 % results + '\n')  # P, R, mAP@.5, mAP@.5-.95, val_loss(box, obj, cls)              if len(opt.name) and opt.bucket:                  os.system('gsutil cp %s gs://%s/results/results%s.txt' % (results_file, opt.bucket, opt.name))                # Tensorboard              if tb_writer:                 tags = ['train/giou_loss', 'train/obj_loss', 'train/cls_loss',  # train loss                 tags = ['train/box_loss', 'train/obj_loss', 'train/cls_loss',  # train loss                          'metrics/precision', 'metrics/recall', 'metrics/mAP_0.5', 'metrics/mAP_0.5:0.95',                         'val/giou_loss', 'val/obj_loss', 'val/cls_loss',  # val loss                         'val/box_loss', 'val/obj_loss', 'val/cls_loss',  # val loss                          'x/lr0', 'x/lr1', 'x/lr2']  # params                  for x, tag in zip(list(mloss[:-1]) + list(results) + lr, tags):                      tb_writer.add_scalar(tag, x, epoch)                # Update best mAP             fi = fitness(np.array(results).reshape(1, -1))  # fitness_i = weighted combination of [P, R, mAP, F1]             fi = fitness(np.array(results).reshape(1, -1))  # weighted combination of [P, R, mAP@.5, mAP@.5-.95]              if fi > best_fitness:                  best_fitness = fi   
