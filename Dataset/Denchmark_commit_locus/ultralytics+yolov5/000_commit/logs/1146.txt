      CIoU nan bug fix (#736) 
     return ap     def bbox_iou(box1, box2, x1y1x2y2=True, GIoU=False, DIoU=False, CIoU=False): def bbox_iou(box1, box2, x1y1x2y2=True, GIoU=False, DIoU=False, CIoU=False, eps=1e-12):      # Returns the IoU of box1 to box2. box1 is 4, box2 is nx4      box2 = box2.T        # Get the coordinates of bounding boxes      if x1y1x2y2:  # x1, y1, x2, y2 = box1         b1_x1, b1_y1, b1_x2, b1_y2 = box1[0], box1[1], box1[2], box1[3]         b2_x1, b2_y1, b2_x2, b2_y2 = box2[0], box2[1], box2[2], box2[3]         b1_x1, b1_y1, b1_x2, b1_y2 = box1[0], box1[1], box1[2] + eps, box1[3] + eps         b2_x1, b2_y1, b2_x2, b2_y2 = box2[0], box2[1], box2[2] + eps, box2[3] + eps      else:  # transform from xywh to xyxy         b1_x1, b1_x2 = box1[0] - box1[2] / 2, box1[0] + box1[2] / 2         b1_y1, b1_y2 = box1[1] - box1[3] / 2, box1[1] + box1[3] / 2         b2_x1, b2_x2 = box2[0] - box2[2] / 2, box2[0] + box2[2] / 2         b2_y1, b2_y2 = box2[1] - box2[3] / 2, box2[1] + box2[3] / 2         b1_x1, b1_x2 = box1[0] - box1[2] / 2, box1[0] + box1[2] / 2 + eps         b1_y1, b1_y2 = box1[1] - box1[3] / 2, box1[1] + box1[3] / 2 + eps         b2_x1, b2_x2 = box2[0] - box2[2] / 2, box2[0] + box2[2] / 2 + eps         b2_y1, b2_y2 = box2[1] - box2[3] / 2, box2[1] + box2[3] / 2 + eps        # Intersection area      inter = (torch.min(b1_x2, b2_x2) - torch.max(b1_x1, b2_x1)).clamp(0) * \ 
