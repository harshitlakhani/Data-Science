      YouTube Livestream Detection (#2752)          * Youtube livestream detection          * dependancy update to auto install pafy          * Remove print          * include youtube_dl in deps          * PEP8 reformat          * youtube url check fix          * reduce lines          * add comment          * update check_requirements          * stream framerate fix          * Update README.md          * cleanup          * PEP8          * remove cap.retrieve() failure code          Co-authored-by: Glenn Jocher <glenn.jocher@ultralytics.com> 
         print(e)     def check_requirements(file='requirements.txt', exclude=()):     # Check installed dependencies meet requirements def check_requirements(requirements='requirements.txt', exclude=()):     # Check installed dependencies meet requirements (pass *.txt file or list of packages)      import pkg_resources as pkg      prefix = colorstr('red', 'bold', 'requirements:')     file = Path(file)     if not file.exists():         print(f"{prefix} {file.resolve()} not found, check failed.")         return     if isinstance(requirements, (str, Path)):  # requirements.txt file         file = Path(requirements)         if not file.exists():             print(f"{prefix} {file.resolve()} not found, check failed.")             return         requirements = [f'{x.name}{x.specifier}' for x in pkg.parse_requirements(file.open()) if x.name not in exclude]     else:  # list or tuple of packages         requirements = [x for x in requirements if x not in exclude]        n = 0  # number of packages updates     requirements = [f'{x.name}{x.specifier}' for x in pkg.parse_requirements(file.open()) if x.name not in exclude]      for r in requirements:          try:              pkg.require(r) 
