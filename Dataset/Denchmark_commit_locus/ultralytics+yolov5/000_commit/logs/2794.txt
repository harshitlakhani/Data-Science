      single command --resume (#756)          * single command --resume          * else check files, remove TODO          * argparse.Namespace()          * tensorboard lr          * bug fix in get_latest_run() 
     opt.world_size = int(os.environ['WORLD_SIZE']) if 'WORLD_SIZE' in os.environ else 1      opt.global_rank = int(os.environ['RANK']) if 'RANK' in os.environ else -1      set_logging(opt.global_rank)      # Resume     if opt.resume:         last = get_latest_run() if opt.resume == 'get_last' else opt.resume  # resume from most recent run         if last and not opt.weights:             logger.info(f'Resuming training from {last}')         opt.weights = last if opt.resume and not opt.weights else opt.weights      if opt.global_rank in [-1, 0]:          check_git_status()       opt.hyp = opt.hyp or ('data/hyp.finetune.yaml' if opt.weights else 'data/hyp.scratch.yaml')     opt.data, opt.cfg, opt.hyp = check_file(opt.data), check_file(opt.cfg), check_file(opt.hyp)  # check files     assert len(opt.cfg) or len(opt.weights), 'either --cfg or --weights must be specified'     # Resume     if opt.resume:  # resume an interrupted run         ckpt = opt.resume if isinstance(opt.resume, str) else get_latest_run()  # specified or most recent path         assert os.path.isfile(ckpt), 'ERROR: --resume checkpoint does not exist'         with open(Path(ckpt).parent.parent / 'opt.yaml') as f:             opt = argparse.Namespace(**yaml.load(f, Loader=yaml.FullLoader))  # replace         opt.cfg, opt.weights, opt.resume = '', ckpt, True         logger.info('Resuming training from %s' % ckpt)      else:         opt.hyp = opt.hyp or ('data/hyp.finetune.yaml' if opt.weights else 'data/hyp.scratch.yaml')         opt.data, opt.cfg, opt.hyp = check_file(opt.data), check_file(opt.cfg), check_file(opt.hyp)  # check files         assert len(opt.cfg) or len(opt.weights), 'either --cfg or --weights must be specified'         opt.img_size.extend([opt.img_size[-1]] * (2 - len(opt.img_size)))  # extend to 2 sizes (train, test)       opt.img_size.extend([opt.img_size[-1]] * (2 - len(opt.img_size)))  # extend to 2 sizes (train, test)      device = select_device(opt.device, batch_size=opt.batch_size)        # DDP mode 
