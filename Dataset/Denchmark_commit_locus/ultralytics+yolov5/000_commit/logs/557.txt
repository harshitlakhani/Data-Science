      Scipy kmeans-robust autoanchor update (#2470)          Fix for https://github.com/ultralytics/yolov5/issues/2394 
         bpr = (best > 1. / thr).float().mean()  # best possible recall          return bpr, aat       bpr, aat = metric(m.anchor_grid.clone().cpu().view(-1, 2))     anchors = m.anchor_grid.clone().cpu().view(-1, 2)  # current anchors     bpr, aat = metric(anchors)      print(f'anchors/target = {aat:.2f}, Best Possible Recall (BPR) = {bpr:.4f}', end='')      if bpr < 0.98:  # threshold to recompute          print('. Attempting to improve anchors, please wait...')          na = m.anchor_grid.numel() // 2  # number of anchors         new_anchors = kmean_anchors(dataset, n=na, img_size=imgsz, thr=thr, gen=1000, verbose=False)         new_bpr = metric(new_anchors.reshape(-1, 2))[0]         try:             anchors = kmean_anchors(dataset, n=na, img_size=imgsz, thr=thr, gen=1000, verbose=False)         except Exception as e:             print(f'{prefix}ERROR: {e}')         new_bpr = metric(anchors)[0]          if new_bpr > bpr:  # replace anchors             new_anchors = torch.tensor(new_anchors, device=m.anchors.device).type_as(m.anchors)             m.anchor_grid[:] = new_anchors.clone().view_as(m.anchor_grid)  # for inference             m.anchors[:] = new_anchors.clone().view_as(m.anchors) / m.stride.to(m.anchors.device).view(-1, 1, 1)  # loss             anchors = torch.tensor(anchors, device=m.anchors.device).type_as(m.anchors)             m.anchor_grid[:] = anchors.clone().view_as(m.anchor_grid)  # for inference             m.anchors[:] = anchors.clone().view_as(m.anchors) / m.stride.to(m.anchors.device).view(-1, 1, 1)  # loss              check_anchor_order(m)              print(f'{prefix}New anchors saved to model. Update model *.yaml to use these anchors in the future.')          else: 
