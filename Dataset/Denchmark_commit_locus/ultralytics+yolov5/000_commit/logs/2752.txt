      Improved W&B integration  (#2125)          * Init Commit          * new wandb integration          * Update          * Use data_dict in test          * Updates          * Update: scope of log_img          * Update: scope of log_img          * Update          * Update: Fix logging conditions          * Add tqdm bar, support for .txt dataset format          * Improve Result table Logger          * Init Commit          * new wandb integration          * Update          * Use data_dict in test          * Updates          * Update: scope of log_img          * Update: scope of log_img          * Update          * Update: Fix logging conditions          * Add tqdm bar, support for .txt dataset format          * Improve Result table Logger          * Add dataset creation in training script          * Change scope: self.wandb_run          * Add wandb-artifact:// natively          you can now use --resume with wandb run links          * Add suuport for logging dataset while training          * Cleanup          * Fix: Merge conflict          * Fix: CI tests          * Automatically use wandb config          * Fix: Resume          * Fix: CI          * Enhance: Using val_table          * More resume enhancement          * FIX : CI          * Add alias          * Get useful opt config data          * train.py cleanup          * Cleanup train.py          * more cleanup          * Cleanup| CI fix          * Reformat using PEP8          * FIX:CI          * rebase          * remove uneccesary changes          * remove uneccesary changes          * remove uneccesary changes          * remove unecessary chage from test.py          * FIX: resume from local checkpoint          * FIX:resume          * FIX:resume          * Reformat          * Performance improvement          * Fix local resume          * Fix local resume          * FIX:CI          * Fix: CI          * Imporve image logging          * (:(:Redo CI tests:):)          * Remember epochs when resuming          * Remember epochs when resuming          * Update DDP location          Potential fix for #2405          * PEP8 reformat          * 0.25 confidence threshold          * reset train.py plots syntax to previous          * reset epochs completed syntax to previous          * reset space to previous          * remove brackets          * reset comment to previous          * Update: is_coco check, remove unused code          * Remove redundant print statement          * Remove wandb imports          * remove dsviz logger from test.py          * Remove redundant change from test.py          * remove redundant changes from train.py          * reformat and improvements          * Fix typo          * Add tqdm tqdm progress when scanning files, naming improvements          Co-authored-by: Glenn Jocher <glenn.jocher@ultralytics.com> 
                                  "domain": "pixel"})                  img_classes[cls] = class_to_id[cls]              boxes = {"ground_truth": {"box_data": box_data, "class_labels": class_to_id}}  # inference-space             table.add_data(si, wandb.Image(paths, classes=class_set, boxes=boxes), json.dumps(img_classes))             table.add_data(si, wandb.Image(paths, classes=class_set, boxes=boxes), json.dumps(img_classes),                            Path(paths).name)          artifact.add(table, name)         labels_path = 'labels'.join(image_path.rsplit('images', 1))         zip_path = Path(labels_path).parent / (name + '_labels.zip')         if not zip_path.is_file():  # make_archive won't check if file exists             shutil.make_archive(zip_path.with_suffix(''), 'zip', labels_path)         artifact.add_file(str(zip_path), name='data/labels.zip')         wandb.log_artifact(artifact)         print("Saving data to W&B...")         return artifact      def log_training_progress(self, predn, path, names):         if self.val_table and self.result_table:             class_set = wandb.Classes([{'id': id, 'name': name} for id, name in names.items()])             box_data = []             total_conf = 0             for *xyxy, conf, cls in predn.tolist():                 if conf >= 0.25:                     box_data.append(                         {"position": {"minX": xyxy[0], "minY": xyxy[1], "maxX": xyxy[2], "maxY": xyxy[3]},                          "class_id": int(cls),                          "box_caption": "%s %.3f" % (names[cls], conf),                          "scores": {"class_score": conf},                          "domain": "pixel"})                     total_conf = total_conf + conf             boxes = {"predictions": {"box_data": box_data, "class_labels": names}}  # inference-space             id = self.val_table_map[Path(path).name]             self.result_table.add_data(self.current_epoch,                                        id,                                        wandb.Image(self.val_table.data[id][1], boxes=boxes, classes=class_set),                                        total_conf / max(1, len(box_data))                                        )        def log(self, log_dict):          if self.wandb_run:              for key, value in log_dict.items():                  self.log_dict[key] = value       def end_epoch(self):         if self.wandb_run and self.log_dict:     def end_epoch(self, best_result=False):         if self.wandb_run:              wandb.log(self.log_dict)         self.log_dict = {}             self.log_dict = {}             if self.result_artifact:                 train_results = wandb.JoinedTable(self.val_table, self.result_table, "id")                 self.result_artifact.add(train_results, 'result')                 wandb.log_artifact(self.result_artifact, aliases=['latest', 'epoch ' + str(self.current_epoch),                                                                   ('best' if best_result else '')])                 self.result_table = wandb.Table(["epoch", "id", "prediction", "avg_confidence"])                 self.result_artifact = wandb.Artifact("run_" + wandb.run.id + "_progress", "evaluation")        def finish_run(self):          if self.wandb_run:             if self.result_artifact:                 print("Add Training Progress Artifact")                 self.result_artifact.add(self.result_table, 'result')                 train_results = wandb.JoinedTable(self.testset_artifact.get("val"), self.result_table, "id")                 self.result_artifact.add(train_results, 'joined_result')                 wandb.log_artifact(self.result_artifact)              if self.log_dict:                  wandb.log(self.log_dict)              wandb.run.finish() 
