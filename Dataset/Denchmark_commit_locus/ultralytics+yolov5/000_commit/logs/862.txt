      Increment train, test, detect runs/ (#1322)          * Increment train, test, detect runs/          * Update ci-testing.yml          * inference/images to data/images          * move images          * runs/exp to runs/train/exp          * update 'results saved to %s' str 
   from models.experimental import attempt_load  from utils.datasets import LoadStreams, LoadImages from utils.general import (     check_img_size, non_max_suppression, apply_classifier, scale_coords,     xyxy2xywh, plot_one_box, strip_optimizer, set_logging) from utils.general import check_img_size, non_max_suppression, apply_classifier, scale_coords, xyxy2xywh, \     plot_one_box, strip_optimizer, set_logging, increment_dir  from utils.torch_utils import select_device, load_classifier, time_synchronized      def detect(save_img=False):     out, source, weights, view_img, save_txt, imgsz = \         opt.save_dir, opt.source, opt.weights, opt.view_img, opt.save_txt, opt.img_size     save_dir, source, weights, view_img, save_txt, imgsz = \         Path(opt.save_dir), opt.source, opt.weights, opt.view_img, opt.save_txt, opt.img_size      webcam = source.isnumeric() or source.startswith(('rtsp://', 'rtmp://', 'http://')) or source.endswith('.txt')       # Directories     if save_dir == Path('runs/detect'):  # if default         os.makedirs('runs/detect', exist_ok=True)  # make base         save_dir = Path(increment_dir(save_dir / 'exp', opt.name))  # increment run     os.makedirs(save_dir / 'labels' if save_txt else save_dir, exist_ok=True)  # make new dir       # Initialize      set_logging()      device = select_device(opt.device)     if os.path.exists(out):  # output dir         shutil.rmtree(out)  # delete dir     os.makedirs(out)  # make new dir      half = device.type != 'cpu'  # half precision only supported on CUDA        # Load model 
