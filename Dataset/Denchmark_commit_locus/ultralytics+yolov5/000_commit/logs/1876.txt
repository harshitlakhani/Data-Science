      AutoAnchor bug fix # 117 
         best = x.max(1)[0]  # best_x          return (best > 1. / thr).float().mean()  # í˜»best possible recall       bpr = metric(anchors.clone().cpu().view(-1, 2))     bpr = metric(m.anchor_grid.clone().cpu().view(-1, 2))      print('Best Possible Recall (BPR) = %.4f' % bpr, end='')      if bpr < 0.99:  # threshold to recompute          print('. Attempting to generate improved anchors, please wait...' % bpr)         new_anchors = kmean_anchors(dataset, n=anchors.numel() // 2, img_size=imgsz, thr=thr, gen=1000, verbose=False)         na = m.anchor_grid.numel() // 2  # number of anchors         new_anchors = kmean_anchors(dataset, n=na, img_size=imgsz, thr=thr, gen=1000, verbose=False)          new_bpr = metric(new_anchors.reshape(-1, 2))         if new_bpr > bpr:             anchors[:] = torch.tensor(new_anchors).view_as(anchors).type_as(anchors)         if new_bpr > bpr:  # replace anchors             new_anchors = torch.tensor(new_anchors, device=m.anchors.device).type_as(m.anchors)             m.anchor_grid[:] = new_anchors.clone().view_as(m.anchor_grid)  # for inference             m.anchors[:] = new_anchors.clone().view_as(m.anchors) / m.stride.to(m.anchors.device).view(-1, 1, 1)  # loss              print('New anchors saved to model. Update model *.yaml to use these anchors in the future.')          else:              print('Original anchors better than new anchors. Proceeding with original anchors.') 
