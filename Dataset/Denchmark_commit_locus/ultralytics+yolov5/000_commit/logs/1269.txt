      Add idetection_profile() function to plots.py (#1700) 
     print('\nPlot saved as evolve.png')     def profile_idetection(start=0, stop=0, labels=(), save_dir=''):     # Plot iDetection '*.txt' per-image logs. from . import *; profile_idetection()     fig, ax = plt.subplots(2, 4, figsize=(12, 6), tight_layout=True)     ax = ax.ravel()     s = ['Images', 'Free Storage (GB)', 'RAM Usage (GB)', 'Battery', 'dt_raw (ms)', 'dt_smooth (ms)', 'real-world FPS']     files = list(Path(save_dir).glob('frames*.txt'))     for fi, f in enumerate(files):         try:             results = np.loadtxt(f, ndmin=2).T[:, 90:-30]  # clip first and last rows             n = results.shape[1]  # number of rows             x = np.arange(start, min(stop, n) if stop else n)             t = (results[0] - results[0].min())  # set t0=0s             results[0] = x             for i, a in enumerate(ax):                 if i < len(results):                     y = results[i, x]                     label = labels[fi] if len(labels) else f.stem.replace('frames_', '')                     a.plot(t, y, marker='.', label=label, linewidth=1, markersize=5)                     a.set_title(s[i])                     a.set_xlabel('time (s)')                     # if fi == len(files) - 1:                     # a.set_ylim(bottom=0)                     for side in ['top', 'right']:                         a.spines[side].set_visible(False)                 else:                     a.remove()         except Exception as e:             print('Warning: Plotting error for %s; %s' % (f, e))      ax[1].legend()     fig.savefig(Path(save_dir) / 'idetection_profile.png', dpi=200)    def plot_results_overlay(start=0, stop=0):  # from utils.plots import *; plot_results_overlay()      # Plot training 'results*.txt', overlaying train and val losses      s = ['train', 'train', 'train', 'Precision', 'mAP@0.5', 'val', 'val', 'val', 'Recall', 'mAP@0.5:0.95']  # legends 
