      improved model.yaml source tracking 
     class Model(nn.Module):     def __init__(self, model_cfg='yolov5s.yaml', ch=3, nc=None):  # model, input channels, number of classes     def __init__(self, cfg='yolov5s.yaml', ch=3, nc=None):  # model, input channels, number of classes          super(Model, self).__init__()         if type(model_cfg) is dict:             self.md = model_cfg  # model dict         if isinstance(cfg, dict):             self.yaml = cfg  # model dict          else:  # is *.yaml              import yaml  # for torch hub             with open(model_cfg) as f:                 self.md = yaml.load(f, Loader=yaml.FullLoader)  # model dict             self.yaml_file = Path(cfg).name             with open(cfg) as f:                 self.yaml = yaml.load(f, Loader=yaml.FullLoader)  # model dict            # Define model         if nc and nc != self.md['nc']:             print('Overriding %s nc=%g with nc=%g' % (model_cfg, self.md['nc'], nc))             self.md['nc'] = nc  # override yaml value         self.model, self.save = parse_model(self.md, ch=[ch])  # model, savelist, ch_out         if nc and nc != self.yaml['nc']:             print('Overriding %s nc=%g with nc=%g' % (cfg, self.yaml['nc'], nc))             self.yaml['nc'] = nc  # override yaml value         self.model, self.save = parse_model(deepcopy(self.yaml), ch=[ch])  # model, savelist, ch_out          # print([x.shape for x in self.forward(torch.zeros(1, ch, 64, 64))])            # Build strides, anchors 
