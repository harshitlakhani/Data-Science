      PyTorch Hub cv2 .save() .show() bug fix (#2831)          * PyTorch Hub cv2 .save() .show() bug fix          cv2.rectangle() was failing on non-contiguous np array inputs. This checks for contiguous arrays and applies is necessary:     ```python     imgs[i] = im if im.data.contiguous else np.ascontiguousarray(im)  # update     ```          * Update plots.py          ```python     assert im.data.contiguous, 'Image not contiguous. Apply np.ascontiguousarray(im) to plot_on_box() input image.'     ```          * Update hubconf.py          Expand CI tests to OpenCV image. 
     return filtfilt(b, a, data)  # forward-backward filter     def plot_one_box(x, img, color=None, label=None, line_thickness=3):     # Plots one bounding box on image img     tl = line_thickness or round(0.002 * (img.shape[0] + img.shape[1]) / 2) + 1  # line/font thickness def plot_one_box(x, im, color=None, label=None, line_thickness=3):     # Plots one bounding box on image 'im' using OpenCV     assert im.data.contiguous, 'Image not contiguous. Apply np.ascontiguousarray(im) to plot_on_box() input image.'     tl = line_thickness or round(0.002 * (im.shape[0] + im.shape[1]) / 2) + 1  # line/font thickness      color = color or [random.randint(0, 255) for _ in range(3)]      c1, c2 = (int(x[0]), int(x[1])), (int(x[2]), int(x[3]))     cv2.rectangle(img, c1, c2, color, thickness=tl, lineType=cv2.LINE_AA)     cv2.rectangle(im, c1, c2, color, thickness=tl, lineType=cv2.LINE_AA)      if label:          tf = max(tl - 1, 1)  # font thickness          t_size = cv2.getTextSize(label, 0, fontScale=tl / 3, thickness=tf)[0]          c2 = c1[0] + t_size[0], c1[1] - t_size[1] - 3         cv2.rectangle(img, c1, c2, color, -1, cv2.LINE_AA)  # filled         cv2.putText(img, label, (c1[0], c1[1] - 2), 0, tl / 3, [225, 255, 255], thickness=tf, lineType=cv2.LINE_AA)         cv2.rectangle(im, c1, c2, color, -1, cv2.LINE_AA)  # filled         cv2.putText(im, label, (c1[0], c1[1] - 2), 0, tl / 3, [225, 255, 255], thickness=tf, lineType=cv2.LINE_AA)     def plot_one_box_PIL(box, img, color=None, label=None, line_thickness=None):     img = Image.fromarray(img)     draw = ImageDraw.Draw(img)     line_thickness = line_thickness or max(int(min(img.size) / 200), 2) def plot_one_box_PIL(box, im, color=None, label=None, line_thickness=None):     # Plots one bounding box on image 'im' using PIL     im = Image.fromarray(im)     draw = ImageDraw.Draw(im)     line_thickness = line_thickness or max(int(min(im.size) / 200), 2)      draw.rectangle(box, width=line_thickness, outline=tuple(color))  # plot      if label:         fontsize = max(round(max(img.size) / 40), 12)         fontsize = max(round(max(im.size) / 40), 12)          font = ImageFont.truetype("Arial.ttf", fontsize)          txt_width, txt_height = font.getsize(label)          draw.rectangle([box[0], box[1] - txt_height + 4, box[0] + txt_width, box[1]], fill=tuple(color))          draw.text((box[0], box[1] - txt_height + 1), label, fill=(255, 255, 255), font=font)     return np.asarray(img)     return np.asarray(im)      def plot_wh_methods():  # from utils.plots import *; plot_wh_methods() 
