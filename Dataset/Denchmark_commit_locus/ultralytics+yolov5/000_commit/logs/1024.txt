      update common.py add Classify() 
       def forward(self, x):          return torch.cat(x, self.d)   class Flatten(nn.Module):     # Use after nn.AdaptiveAvgPool2d(1) to remove last 2 dimensions     @staticmethod     def forward(x):         return x.view(x.size(0), -1)   class Classify(nn.Module):     # Classification head, i.e. x(b,c1,20,20) to x(b,c2)     def __init__(self, c1, c2, k=1, s=1, p=None, g=1):  # ch_in, ch_out, kernel, stride, padding, groups         super(Classify, self).__init__()         self.aap = nn.AdaptiveAvgPool2d(1)  # to x(b,c1,1,1)         self.conv = nn.Conv2d(c1, c2, k, s, autopad(k, p), groups=g, bias=False)  # to x(b,c2,1,1)         self.flat = Flatten()      def forward(self, x):         return self.flat(self.conv(self.aap(x)))  # flatten to x(b,c2) 
