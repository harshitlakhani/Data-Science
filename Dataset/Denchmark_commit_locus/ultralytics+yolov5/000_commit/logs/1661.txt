      update mosaic border 
     return img, ratio, (dw, dh)     def random_affine(img, targets=(), degrees=10, translate=.1, scale=.1, shear=10, border=0): def random_affine(img, targets=(), degrees=10, translate=.1, scale=.1, shear=10, border=(0, 0)):      # torchvision.transforms.RandomAffine(degrees=(-10, 10), translate=(.1, .1), scale=(.9, 1.1), shear=(-10, 10))      # https://medium.com/uruvideo/dataset-augmentation-with-random-homographies-a8f4b44830d4      # targets = [cls, xyxy]       height = img.shape[0] + border * 2     width = img.shape[1] + border * 2     height = img.shape[0] + border[0] * 2  # shape(h,w,c)     width = img.shape[1] + border[1] * 2        # Rotation and Scale      R = np.eye(3) 
