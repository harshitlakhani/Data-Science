      Detection cropping+saving feature addition for detect.py and PyTorch Hub (#2827)          * Update detect.py          * Update detect.py          * Update greetings.yml          * Update cropping          * cleanup          * Update increment_path()          * Update common.py          * Update detect.py          * Update detect.py          * Update detect.py          * Update common.py          * cleanup          * Update detect.py          Co-authored-by: Glenn Jocher <glenn.jocher@ultralytics.com> 
         self.t = tuple((times[i + 1] - times[i]) * 1000 / self.n for i in range(3))  # timestamps (ms)          self.s = shape  # inference BCHW shape       def display(self, pprint=False, show=False, save=False, render=False, save_dir=''):     def display(self, pprint=False, show=False, save=False, crop=False, render=False, save_dir=Path('')):          colors = color_list()         for i, (img, pred) in enumerate(zip(self.imgs, self.pred)):             str = f'image {i + 1}/{len(self.pred)}: {img.shape[0]}x{img.shape[1]} '         for i, (im, pred) in enumerate(zip(self.imgs, self.pred)):             str = f'image {i + 1}/{len(self.pred)}: {im.shape[0]}x{im.shape[1]} '              if pred is not None:                  for c in pred[:, -1].unique():                      n = (pred[:, -1] == c).sum()  # detections per class                      str += f"{n} {self.names[int(c)]}{'s' * (n > 1)}, "  # add to string                 if show or save or render:                 if show or save or render or crop:                      for *box, conf, cls in pred:  # xyxy, confidence, class                          label = f'{self.names[int(cls)]} {conf:.2f}'                         plot_one_box(box, img, label=label, color=colors[int(cls) % 10])             img = Image.fromarray(img.astype(np.uint8)) if isinstance(img, np.ndarray) else img  # from np                         if crop:                             save_one_box(box, im, file=save_dir / 'crops' / self.names[int(cls)] / self.files[i])                         else:  # all others                             plot_one_box(box, im, label=label, color=colors[int(cls) % 10])              im = Image.fromarray(im.astype(np.uint8)) if isinstance(im, np.ndarray) else im  # from np              if pprint:                  print(str.rstrip(', '))              if show:                 img.show(self.files[i])  # show                 im.show(self.files[i])  # show              if save:                  f = self.files[i]                 img.save(Path(save_dir) / f)  # save                 im.save(save_dir / f)  # save                  print(f"{'Saved' * (i == 0)} {f}", end=',' if i < self.n - 1 else f' to {save_dir}\n')              if render:                 self.imgs[i] = np.asarray(img)                 self.imgs[i] = np.asarray(im)        def print(self):          self.display(pprint=True)  # print results 
