      Improved W&B integration  (#2125)          * Init Commit          * new wandb integration          * Update          * Use data_dict in test          * Updates          * Update: scope of log_img          * Update: scope of log_img          * Update          * Update: Fix logging conditions          * Add tqdm bar, support for .txt dataset format          * Improve Result table Logger          * Init Commit          * new wandb integration          * Update          * Use data_dict in test          * Updates          * Update: scope of log_img          * Update: scope of log_img          * Update          * Update: Fix logging conditions          * Add tqdm bar, support for .txt dataset format          * Improve Result table Logger          * Add dataset creation in training script          * Change scope: self.wandb_run          * Add wandb-artifact:// natively          you can now use --resume with wandb run links          * Add suuport for logging dataset while training          * Cleanup          * Fix: Merge conflict          * Fix: CI tests          * Automatically use wandb config          * Fix: Resume          * Fix: CI          * Enhance: Using val_table          * More resume enhancement          * FIX : CI          * Add alias          * Get useful opt config data          * train.py cleanup          * Cleanup train.py          * more cleanup          * Cleanup| CI fix          * Reformat using PEP8          * FIX:CI          * rebase          * remove uneccesary changes          * remove uneccesary changes          * remove uneccesary changes          * remove unecessary chage from test.py          * FIX: resume from local checkpoint          * FIX:resume          * FIX:resume          * Reformat          * Performance improvement          * Fix local resume          * Fix local resume          * FIX:CI          * Fix: CI          * Imporve image logging          * (:(:Redo CI tests:):)          * Remember epochs when resuming          * Remember epochs when resuming          * Update DDP location          Potential fix for #2405          * PEP8 reformat          * 0.25 confidence threshold          * reset train.py plots syntax to previous          * reset epochs completed syntax to previous          * reset space to previous          * remove brackets          * reset comment to previous          * Update: is_coco check, remove unused code          * Remove redundant print statement          * Remove wandb imports          * remove dsviz logger from test.py          * Remove redundant change from test.py          * remove redundant changes from train.py          * reformat and improvements          * Fix typo          * Add tqdm tqdm progress when scanning files, naming improvements          Co-authored-by: Glenn Jocher <glenn.jocher@ultralytics.com> 
                         'ema': deepcopy(ema.ema).half(),                          'updates': ema.updates,                          'optimizer': optimizer.state_dict(),                         'wandb_id': wandb_run.id if wandb else None}                         'wandb_id': wandb_logger.wandb_run.id if wandb_logger.wandb else None}                    # Save last, best and delete                  torch.save(ckpt, last)                  if best_fitness == fi:                      torch.save(ckpt, best)                 if wandb_logger.wandb:                     if ((epoch + 1) % opt.save_period == 0 and not final_epoch) and opt.save_period != -1:                         wandb_logger.log_model(                             last.parent, opt, epoch, fi, best_model=best_fitness == fi)                  del ckpt          wandb_logger.end_epoch(best_result=best_fitness == fi)                   # end epoch ----------------------------------------------------------------------------------------------------      # end training       if rank in [-1, 0]:         # Strip optimizers         final = best if best.exists() else last  # final model         for f in last, best:             if f.exists():                 strip_optimizer(f)         if opt.bucket:             os.system(f'gsutil cp {final} gs://{opt.bucket}/weights')  # upload           # Plots          if plots:              plot_results(save_dir=save_dir)  # save as results.png             if wandb:             if wandb_logger.wandb:                  files = ['results.png', 'confusion_matrix.png', *[f'{x}_curve.png' for x in ('F1', 'PR', 'P', 'R')]]                 wandb.log({"Results": [wandb.Image(str(save_dir / f), caption=f) for f in files                                        if (save_dir / f).exists()]})                 if opt.log_artifacts:                     wandb.log_artifact(artifact_or_path=str(final), type='model', name=save_dir.stem)                  wandb_logger.log({"Results": [wandb_logger.wandb.Image(str(save_dir / f), caption=f) for f in files                                               if (save_dir / f).exists()]})          # Test best.pt          logger.info('%g epochs completed in %.3f hours.\n' % (epoch - start_epoch + 1, (time.time() - t0) / 3600))          if opt.data.endswith('coco.yaml') and nc == 80:  # if COCO 
